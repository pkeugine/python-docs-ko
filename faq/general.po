# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 15:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Eugine Park <pkeugine@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../Doc/faq/general.rst:5
msgid "General Python FAQ"
msgstr "일반적인 파이썬 질문"

#: ../Doc/faq/general.rst:8
msgid "Contents"
msgstr "목차"

#: ../Doc/faq/general.rst:13
msgid "General Information"
msgstr "일반적인 정보"

#: ../Doc/faq/general.rst:16
msgid "What is Python?"
msgstr "파이썬이 무엇입니까?"

#: ../Doc/faq/general.rst:18
msgid ""
"Python is an interpreted, interactive, object-oriented programming "
"language.  It incorporates modules, exceptions, dynamic typing, very high"
" level dynamic data types, and classes.  Python combines remarkable power"
" with very clear syntax. It has interfaces to many system calls and "
"libraries, as well as to various window systems, and is extensible in C "
"or C++.  It is also usable as an extension language for applications that"
" need a programmable interface. Finally, Python is portable: it runs on "
"many Unix variants, on the Mac, and on Windows 2000 and later."
msgstr ""
"파이썬은 해석된, 상호작용이 가능한, 객체지향적 프로그래밍 언어입니다. "
"이 ... 모듈, 예외, dynamic typing, 굉장히 높은 수준의 dynamic data " 
"types, 그리고 클래스를 *내포하고 있습니다.* 파이썬은 굉장히 깔끔한 구문으로"
"놀랄만한 힘을 결합합니다. 이 언어는 많은 많은 시스템 콜과 라이브러리 뿐만 "
"아니라 다양한 윈도우 시스템 관련 인터페이스를 갖고 있으며 C 언어와 C++ "
"언어로 확장이 가능합니다. 또한 프로그래밍 인터페이스가 필요한 애플리케이션의 "
"확장 언어로도 사용할 수 있습니다. 마지막으로, 파이썬은 많은 유닉스 환경과 "
"맥, 그리고 윈도우 2000 이상의 환경에서 돌아가는 포터블 언어입니다."

#: ../Doc/faq/general.rst:27
msgid ""
"To find out more, start with :ref:`tutorial-index`.  The `Beginner's "
"Guide to Python <https://wiki.python.org/moin/BeginnersGuide>`_ links to "
"other introductory tutorials and resources for learning Python."
msgstr ""
"추가 정보를 원하시면 :ref:`tutorial-index`에서 시작하십시오. `Beginner's "
"Guide to Python <https://wiki.python.org/moin/BeginnersGuide>`_\\에서 "
"다른 기초 자습서와 파이썬을 배우기위한 자료들을 보실 수 있습니다." 

#: ../Doc/faq/general.rst:33
msgid "What is the Python Software Foundation?"
msgstr "파이썬 소프트웨서 재단이 무엇입니까?"

#: ../Doc/faq/general.rst:35
msgid ""
"The Python Software Foundation is an independent non-profit organization "
"that holds the copyright on Python versions 2.1 and newer.  The PSF's "
"mission is to advance open source technology related to the Python "
"programming language and to publicize the use of Python.  The PSF's home "
"page is at https://www.python.org/psf/."
msgstr "파이썬 소프트웨어 재단이란 파이썬 2.1 과 그 윗 버전의 저작권을 "
"소유하고 있는 독립적이고 비영리적인 단체입니다. 이 재단의 사명은 파이썬의"
" 사용을 대중화 시키고 파이썬 관련 오픈소스 기술을 발전시키는 것입니다."
"파이썬 소프트웨어 재단의 홈페이지: https://www.python.org/psf/." 

#: ../Doc/faq/general.rst:41
msgid ""
"Donations to the PSF are tax-exempt in the US.  If you use Python and "
"find it helpful, please contribute via `the PSF donation page "
"<https://www.python.org/psf/donations/>`_."
msgstr ""
"파이썬 소프트웨어 재단으로의 기부는 미국에서 면세입니다. 파이썬을 "
"사용하고 도움이 된다고 생각한다면 `PSF 기부 페이지 <https://www."
"python.org/psf/donations/>`_\\페이지에 기여해 주십시오."

#: ../Doc/faq/general.rst:47
msgid "Are there copyright restrictions on the use of Python?"
msgstr "파이썬을 사용할 때 저작권 관련 제한이 있습니까?"

#: ../Doc/faq/general.rst:49
msgid ""
"You can do anything you want with the source, as long as you leave the "
"copyrights in and display those copyrights in any documentation about "
"Python that you produce.  If you honor the copyright rules, it's OK to "
"use Python for commercial use, to sell copies of Python in source or "
"binary form (modified or unmodified), or to sell products that "
"incorporate Python in some form.  We would still like to know about all "
"commercial use of Python, of course."
msgstr ""
"본인이 생성한 파이썬에 대해 저작권을 명시하고, 이와 관련된 정보를 어떠한"
" 형태로든 설명서에 표시하면 본인의 소스로 무엇이든 할 수 있습니다." 
"저작권 관련 규칙을 따르면 파이썬을 상업 목적으로 사용해도 괜찮으며, "
"소스코드나 (수정된 또는 수정되지 않은) 이진형태의 파이썬을 팔거나, "
"파이썬을 내장하는 상품을 팔아도 괜찮습니다. 그럼에도 저희는 파이썬이 "
"사용된 모든 상업 활동을 알고 싶습니다." 

#: ../Doc/faq/general.rst:56
msgid ""
"See `the PSF license page <https://www.python.org/psf/license/>`_ to find"
" further explanations and a link to the full text of the license."
msgstr ""
"라이센스에 관한 구체적인 설명과 원본을 원하시면 `PSF 라이선스 페이지 "
"<https://www.python.org/psf/license/>`_\\를 방문하십시오."

#: ../Doc/faq/general.rst:59
msgid ""
"The Python logo is trademarked, and in certain cases permission is "
"required to use it.  Consult `the Trademark Usage Policy "
"<https://www.python.org/psf/trademarks/>`__ for more information."
msgstr ""
"파이썬 로고는 상표로 등록되어 있으며, 일부 경우에는 사용하기 위한"
"허가가 필요합니다. 더 많은 정보를 원하시면 `상표 사용 정책 "
"<https://www.python.org/psf/trademakrs/>`_\\를 참조하십시오."

#: ../Doc/faq/general.rst:65
msgid "Why was Python created in the first place?"
msgstr "파이썬은 애초에 왜 만들어졌습니까?"

#: ../Doc/faq/general.rst:67
msgid ""
"Here's a *very* brief summary of what started it all, written by Guido "
"van Rossum:"
msgstr ""
"여기 귀도 반 로섬씨가 작성한 *굉장히* 요약된 파이썬의 탄생 계기입니다: "

#: ../Doc/faq/general.rst:70
msgid ""
"I had extensive experience with implementing an interpreted language in "
"the ABC group at CWI, and from working with this group I had learned a "
"lot about language design.  This is the origin of many Python features, "
"including the use of indentation for statement grouping and the inclusion"
" of very-high-level data types (although the details are all different in"
" Python)."
msgstr ""
"저는 CWI(Centrum Wiskunde & Informatica)의 ABC 그룹에서 인터프리터 언어를 "
"도입하며 광범위한 경험을 해봤고, 그 그룹과 일하며 언어의 디자인에 대해 "
"많은 것을 배웠습니다. 들여 쓰기로 문단 묶기나 매우-상위-레벨 자료형을 " 
"포함한 것과 같은 파이썬의 다양한 기능들이 이 당시 경험을 바탕으로"
"만들어졌습니다."

#: ../Doc/faq/general.rst:77
msgid ""
"I had a number of gripes about the ABC language, but also liked many of "
"its features.  It was impossible to extend the ABC language (or its "
"implementation) to remedy my complaints -- in fact its lack of "
"extensibility was one of its biggest problems.  I had some experience "
"with using Modula-2+ and talked with the designers of Modula-3 and read "
"the Modula-3 report. Modula-3 is the origin of the syntax and semantics "
"used for exceptions, and some other Python features."
msgstr ""
"ABC 언어에 있어서 저는 불만도 있었지만 마음에 드는 기능도 많았습니다."
"ABC 언어는 제 불만을 극복할 만큼 확장(또는 구현)할 방법이 없었죠."
"--사실 확장성이 떨어지는 것이 이 언어의 가장 큰 문제점 중 하나였습니다."
"저는 Modula-2+를 사용하는데 약간의 경험이 있었고 Modula-3의 디자이너 " 
"분들과 대화도 나눠보았으며 Modula-3 관련 레포트도 읽어본 상태였습니다. "
"Modula-3은 예외에서 쓰인 문법과 의미론을 비롯한 일부 파이썬 기능들의 "
"기원입니다."

#: ../Doc/faq/general.rst:85
msgid ""
"I was working in the Amoeba distributed operating system group at CWI.  "
"We needed a better way to do system administration than by writing either"
" C programs or Bourne shell scripts, since Amoeba had its own system call"
" interface which wasn't easily accessible from the Bourne shell.  My "
"experience with error handling in Amoeba made me acutely aware of the "
"importance of exceptions as a programming language feature."
msgstr ""
"저는 CWI에서 Amoeba 분산 운영체제 그룹에 속해 일하고 있었습니다. Amoeba는 "
"Bourne 셸로는 쉽게 접근하지 못하는 고유의 시스템 콜 인터페이스를 내장하고 "
"있었기 때문에 저희는 C 프로그램이나 Bourne 셸 스크립트를 작성하는 것이 "
"아닌 더 좋은 시스템 관리 방법이 필요했습니다. Amoeba에서 에러 처리를 "
"해본 경험 덕분에 저는 프로그래밍 언어의 기능에 있어서 예외의 중요성을 "
"인지하고 있었습니다." 

#: ../Doc/faq/general.rst:92
msgid ""
"It occurred to me that a scripting language with a syntax like ABC but "
"with access to the Amoeba system calls would fill the need.  I realized "
"that it would be foolish to write an Amoeba-specific language, so I "
"decided that I needed a language that was generally extensible."
msgstr ""
"ABC의 문법을 지니면서 Amoeba 시스템 콜에 접근 가능한 스크립트 언어가 "
"필요하다는 것을 깨달았죠. Amoeba 특유의 언어를 만드는 건 어리석은 "
"행동이라고 느껴서 대체로 확장 가능한 언어가 필요한 상황이라고"
"판단했습니다."

#: ../Doc/faq/general.rst:97
msgid ""
"During the 1989 Christmas holidays, I had a lot of time on my hand, so I "
"decided to give it a try.  During the next year, while still mostly "
"working on it in my own time, Python was used in the Amoeba project with "
"increasing success, and the feedback from colleagues made me add many "
"early improvements."
msgstr ""
"1989년 크리스마스 연휴에 저는 많은 시간이 있있고, 그 참에 도전해보기로 "
"했습니다. 다음 해에도 제 개인적인 시간을 투자하며 언어를 완성시켜 가는 "
"와중에 Python은 Amoeba 프로젝트에서 날이 갈수록 성공적으로 사용되고 "
" 있었습니다. 그리고 제 동료들의 피드백을 통해 저는 초기 개선사항들을 "
"추가할 수 있었죠."

#: ../Doc/faq/general.rst:103
msgid ""
"In February 1991, after just over a year of development, I decided to "
"post to USENET.  The rest is in the ``Misc/HISTORY`` file."
msgstr ""
"1991년 2월, 1년이 조금 넘는 개발 기간 후, 저는 USENET에 올리기로 "
"결정했습니다. 나머지는 ``Misc/HISTORY`` 파일에 있습니다."

#: ../Doc/faq/general.rst:108
msgid "What is Python good for?"
msgstr "파이썬의 강점은 무엇입니까?"

#: ../Doc/faq/general.rst:110
msgid ""
"Python is a high-level general-purpose programming language that can be "
"applied to many different classes of problems."
msgstr ""
"파이썬은 다양한 상황에 적용가능한, 범용성 있는 고급언어입니다."

#: ../Doc/faq/general.rst:113
msgid ""
"The language comes with a large standard library that covers areas such "
"as string processing (regular expressions, Unicode, calculating "
"differences between files), Internet protocols (HTTP, FTP, SMTP, XML-RPC,"
" POP, IMAP, CGI programming), software engineering (unit testing, "
"logging, profiling, parsing Python code), and operating system interfaces"
" (system calls, filesystems, TCP/IP sockets).  Look at the table of "
"contents for :ref:`library-index` to get an idea of what's available.  A "
"wide variety of third-party extensions are also available.  Consult `the "
"Python Package Index <https://pypi.org>`_ to find packages of interest to"
" you."
msgstr ""
"언어와 함께 오는 표준 라이브러리는 문자열 처리 (정규 표현식, 유니코드, "
"파일 간의 차이 계산), 인터넷 프로토콜 (HTTP, FTP, SMTP, XML-RPC, POP, "
"IMAP, CGI 프로그래밍), 소프트웨어 공학 (유닛 테스트, 로깅, 프로파일링, "
"파이썬 코드 파싱), 그리고 운영체제 인터페이스 (시스템콜, 파일 시스템, "
"TCP/IP 소켓) 등 넓은 영역을 아우릅니다. 구체적인 목차를 보고싶으시면 "
":ref:`library-index`__을 확인하십시오. 다양한 서드파티 확장자도 사용할 "
"수 있습니다. `파이썬 패키지 인덱 <https://pypi.org>`_\\에서 당신이 필요한 "
"패키지를 찾을 수 있습니다." 

#: ../Doc/faq/general.rst:125
msgid "How does the Python version numbering scheme work?"
msgstr "파이썬 버전 관리 규칙은 무엇입니까?"

#: ../Doc/faq/general.rst:127
msgid ""
"Python versions are numbered A.B.C or A.B.  A is the major version number"
" -- it is only incremented for really major changes in the language.  B "
"is the minor version number, incremented for less earth-shattering "
"changes.  C is the micro-level -- it is incremented for each bugfix "
"release.  See :pep:`6` for more information about bugfix releases."
msgstr ""
"파이썬 버전은 A.B.C 또는 A.B. 형식으로 정해집니다. A 가 주된 버전으로, "
"정말 중대한 변경사항이 있을 경우에만 증가합니다. B 는 작은 버전 넘버로, "
" 비교적 작은 변경사항이 있을 시 증가합니다. C 는 미세한 수준의 변경 -- "
"버그를 수정한 배포판을 위한 표시입니다. :pep:`6` 에서 버그 수정 배포판에 "
"대한 구체적인 내용을 확인하실 수 있습니다."

#: ../Doc/faq/general.rst:133
msgid ""
"Not all releases are bugfix releases.  In the run-up to a new major "
"release, a series of development releases are made, denoted as alpha, "
"beta, or release candidate.  Alphas are early releases in which "
"interfaces aren't yet finalized; it's not unexpected to see an interface "
"change between two alpha releases. Betas are more stable, preserving "
"existing interfaces but possibly adding new modules, and release "
"candidates are frozen, making no changes except as needed to fix critical"
" bugs."
msgstr ""
"모든 배포판이 버그 수정 배포판은 아닙니다. 새로운 주 배포판을 만드는 "
"과정에서 알파, 베타, 또는 배포판 후보라 불리는 개발 배포판이 만들어"
"집니다. 알파는 이른 배포판으로, 인터페이스들이 확정되지 않은 배포이므로 "
"두 알파 버전 사이에 인터페이스의 변경이 생기곤 합니다. 베타버전은 더 "
"안정적이며 기존의 인터페이스는 유지하지만 새로운 모듈을 추가할 수 "
"있고, 배포판 후보들은 치명적인 버그수정 외에는 변경사항을 포함하지 "
"않습니다."

#: ../Doc/faq/general.rst:141
msgid ""
"Alpha, beta and release candidate versions have an additional suffix.  "
"The suffix for an alpha version is \"aN\" for some small number N, the "
"suffix for a beta version is \"bN\" for some small number N, and the "
"suffix for a release candidate version is \"cN\" for some small number N."
"  In other words, all versions labeled 2.0aN precede the versions labeled"
" 2.0bN, which precede versions labeled 2.0cN, and *those* precede 2.0."
msgstr ""
"알파, 베타, 그리고 배포판 후보 버전들은 접미사가 추가로 붙습니다."
"알파 버전의 접미사는 낮은 숫자 N을 포함한 \"aN\", 베타 버전의 접미사는 "
"낮은 숫자 N을 포함한 \"bN\", 그리고 배포판 후보 버전의 접미사는 낮은 "
"숫자 N을 포함한 \"cN\"입니다. 즉, 2.0bN 버전은 모든 2.0aN 버전들을 "
"기반으로 두고 있으며, 2.0cN 버전은 모든 2.0bN을, 그리고 2.0 버전은 2.0cN "
"을 기반으로 두고 있습니다." 

#: ../Doc/faq/general.rst:148
msgid ""
"You may also find version numbers with a \"+\" suffix, e.g. \"2.2+\".  "
"These are unreleased versions, built directly from the CPython "
"development repository.  In practice, after a final minor release is "
"made, the version is incremented to the next minor version, which becomes"
" the \"a0\" version, e.g. \"2.4a0\"."
msgstr ""
"또한 \"+\" 접미사가 붙은 버전을 마주할 수도 있습니다.  예) \"2.2+\". "
"이는 CPython 개발 저장소에서 바로 빌드된, 배포되지 않은 버전입니다. "
"실제는 이 버전의 최종 소규모 배포가 이루어질 때 다음 소규모 버전으로 "
"증가되어 \"a0\" 버전이 됩니다. 예) \"2.4a0\"."

#: ../Doc/faq/general.rst:153
msgid ""
"See also the documentation for :data:`sys.version`, "
":data:`sys.hexversion`, and :data:`sys.version_info`."
msgstr ""
":data:`sys.version`, :data:`sys.hexversion`, 그리고 "
":data:`sys.version_info` 문서 역시 확인해 주십시오."

#: ../Doc/faq/general.rst:158
msgid "How do I obtain a copy of the Python source?"
msgstr "파이썬 소스를 어떻게 얻을 수 있습니까?"

#: ../Doc/faq/general.rst:160
msgid ""
"The latest Python source distribution is always available from "
"python.org, at https://www.python.org/downloads/.  The latest development"
" sources can be obtained at https://github.com/python/cpython/."
msgstr ""
"최신 파이썬 소스는 python.org 또는 https://www.python.org/downloads/ 에서 "
"항상 구할 수 있고, 최신 개발 소스는 https://github.com/python/cpython/ "
"에서 구할 수 있습니다."

#: ../Doc/faq/general.rst:164
msgid ""
"The source distribution is a gzipped tar file containing the complete C "
"source, Sphinx-formatted documentation, Python library modules, example "
"programs, and several useful pieces of freely distributable software.  "
"The source will compile and run out of the box on most UNIX platforms."
msgstr ""
"소스 배포판은 모든 C 언어 코드, 스핑크스 형식의 문서, 파이썬 라이브러리 "
"모듈, 예제 프로그램들, 그리고 일부 유용한 무료 배포 소프트웨어를 포함합니다."
"소스는 대부분의 유닉스 플랫폼에서 추가 설정 없이 컴파일되고 실행 가능합니다."

#: ../Doc/faq/general.rst:169
msgid ""
"Consult the `Getting Started section of the Python Developer's Guide "
"<https://devguide.python.org/setup/>`__ for more information on getting "
"the source code and compiling it."
msgstr ""
"소스 코드를 받고 컴파일하는 부분에서 추가 정보를 원하시면 `파이썬 개발자"
"가이드의 개요 <https://devguide.python.org/setup/>`_//를 참고하십시오."

#: ../Doc/faq/general.rst:175
msgid "How do I get documentation on Python?"
msgstr "파이썬 설명 문서는 어떻게 구합니까?"

#: ../Doc/faq/general.rst:179
msgid ""
"The standard documentation for the current stable version of Python is "
"available at https://docs.python.org/3/.  PDF, plain text, and "
"downloadable HTML versions are also available at "
"https://docs.python.org/3/download.html."
msgstr ""
"현재 파이썬의 안정화 버전에 관련된 표준 문서는 https://docs.python.org/3/"
"에서 확인할 수 있습니다. PDF, 텍스트 문서, 그리고 다운로드 가능한 "
"HTML 버전들은 https://docs.python.org/3/download.html 에서 구할 수 있습니다."

#: ../Doc/faq/general.rst:183
msgid ""
"The documentation is written in reStructuredText and processed by `the "
"Sphinx documentation tool <http://sphinx-doc.org/>`__.  The "
"reStructuredText source for the documentation is part of the Python "
"source distribution."
msgstr ""
"문서는 reStructuredText로 쓰여졌으며 `스핑크스 문서화 툴<http://sphinx-"
"doc.org/>`_//로 프로세스되어 있습니다. 문서의 reStructuredText 소스는"
"파이썬 배포 소스의 일부입니다."

#: ../Doc/faq/general.rst:189
msgid "I've never programmed before. Is there a Python tutorial?"
msgstr "저는 프로그래밍을 해본적이 없습니다. 파이썬 튜토리얼이 있습니까?"

#: ../Doc/faq/general.rst:191
msgid ""
"There are numerous tutorials and books available.  The standard "
"documentation includes :ref:`tutorial-index`."
msgstr ""
"다양한 튜토리얼과 책이 존재합니다. 표준 문서로는 :ref:`tutorial-index`"
"가 있습니다."

#: ../Doc/faq/general.rst:194
msgid ""
"Consult `the Beginner's Guide "
"<https://wiki.python.org/moin/BeginnersGuide>`_ to find information for "
"beginning Python programmers, including lists of tutorials."
msgstr ""
"`초보자 가이드 <https://wiki.python.org/moin/BeginnersGuide>`_//에서 "
"튜토리얼 목록과 같은 초보 파이썬 개발자를 위한 정보를 확인하십시오."

#: ../Doc/faq/general.rst:199
msgid "Is there a newsgroup or mailing list devoted to Python?"
msgstr "파이썬에 집중된 뉴스 그룹이나 메일링 리스트가 있습니까?"

#: ../Doc/faq/general.rst:201
msgid ""
"There is a newsgroup, :newsgroup:`comp.lang.python`, and a mailing list, "
"`python-list <https://mail.python.org/mailman/listinfo/python-list>`_.  "
"The newsgroup and mailing list are gatewayed into each other -- if you "
"can read news it's unnecessary to subscribe to the mailing list. "
":newsgroup:`comp.lang.python` is high-traffic, receiving hundreds of "
"postings every day, and Usenet readers are often more able to cope with "
"this volume."
msgstr ""
"뉴스 그룹은 :newsgroup:`comp.lang.python`, 그리고 메일링 리스트는 "
"`python-list <https://mail.python.org/mailman/listinfo/python-list>`_//에서"
"확인 할 수 있습니다. 뉴스 그룹과 메일링 리스트는 서로 연동되어 있어서 "
"뉴스를 읽으신다면 메일을 구독할 필요가 없습니다. :newsgroup:`comp.lang.python`"
"은 활발하고 하루에도 수백 개의 포스팅이 올라오기 때문에 Usenet 독자들은 이 매체"
"를 통해 더 원활하게 소통할 수 있을 것입니다." 

#: ../Doc/faq/general.rst:208
msgid ""
"Announcements of new software releases and events can be found in "
"comp.lang.python.announce, a low-traffic moderated list that receives "
"about five postings per day.  It's available as `the python-announce "
"mailing list <https://mail.python.org/mailman/listinfo/python-announce-"
"list>`_."
msgstr ""
"새로운 소프트웨어의 배포와 이벤트에 관련된 공지는 하루 다섯 개 정도의 "
"포스팅이 올라오는 comp.lang.python.announce 에서 확인할 수 있습니다. "
"이는 `the python-announce mailing list <https://mail.python.org/mailman"
"/listinfo/python-announce-list>`_//라는 메일링 리스트에서도 얻을 수 "
"있습니다."

#: ../Doc/faq/general.rst:213
msgid ""
"More info about other mailing lists and newsgroups can be found at "
"https://www.python.org/community/lists/."
msgstr ""
"https://www.python.org/community/lists/ 에서 다른 메일링 리스트와 "
"뉴스 그룹에 대한 정보를 확인할 수 있습니다."

#: ../Doc/faq/general.rst:218
msgid "How do I get a beta test version of Python?"
msgstr "파이썬 베타 테스트 버전은 어떻게 구합니까?"

#: ../Doc/faq/general.rst:220
msgid ""
"Alpha and beta releases are available from "
"https://www.python.org/downloads/.  All releases are announced on the "
"comp.lang.python and comp.lang.python.announce newsgroups and on the "
"Python home page at https://www.python.org/; an RSS feed of news is "
"available."
msgstr ""
"알파와 베타 배포판은 https://www.python.org/downloads/ 에서 확인할 수 "
"있습니다. 모든 배포는 comp.lang.python 과 comp.lang.python.announce "
"뉴스그룹 그리고 파이썬 홈페이지 https://www.python.org/ 에서 공지됩니다."
"뉴스의 RSS 피드가 제공됩니다."

#: ../Doc/faq/general.rst:225
msgid ""
"You can also access the development version of Python through Git.  See "
"`The Python Developer's Guide <https://devguide.python.org/>`_ for "
"details."
msgstr ""

#: ../Doc/faq/general.rst:230
msgid "How do I submit bug reports and patches for Python?"
msgstr "파이썬 버그 리포트나 패치는 어떻게 제출합니까?"

#: ../Doc/faq/general.rst:232
msgid ""
"To report a bug or submit a patch, please use the Roundup installation at"
" https://bugs.python.org/."
msgstr ""
"버그 리포트나 패치를 제출하려면 https://bugs.python.org/ 의 

#: ../Doc/faq/general.rst:235
msgid ""
"You must have a Roundup account to report bugs; this makes it possible "
"for us to contact you if we have follow-up questions.  It will also "
"enable Roundup to send you updates as we act on your bug. If you had "
"previously used SourceForge to report bugs to Python, you can obtain your"
" Roundup password through Roundup's `password reset procedure "
"<https://bugs.python.org/user?@template=forgotten>`_."
msgstr ""

#: ../Doc/faq/general.rst:241
msgid ""
"For more information on how Python is developed, consult `the Python "
"Developer's Guide <https://devguide.python.org/>`_."
msgstr ""
"파이썬이 어떻게 개발되는지 더 알고 싶으시다면 `파이썬 개발자 가이드 "
"<https://devguide.python.org/>`__을 참조하십시오."

#: ../Doc/faq/general.rst:246
msgid "Are there any published articles about Python that I can reference?"
msgstr "제가 참고할만한 파이썬 관련 기사가 있습니까?"

#: ../Doc/faq/general.rst:248
msgid "It's probably best to cite your favorite book about Python."
msgstr "당신이 가장 좋아하는 파이썬 책을 인용하는 것이 제일 좋을 것 같습니다."

#: ../Doc/faq/general.rst:250
msgid ""
"The very first article about Python was written in 1991 and is now quite "
"outdated."
msgstr ""
"파이썬에 관련된 최초의 기사는 1991년에 작성되어서 이제는 구식입니다."

#: ../Doc/faq/general.rst:253
msgid ""
"Guido van Rossum and Jelke de Boer, \"Interactively Testing Remote "
"Servers Using the Python Programming Language\", CWI Quarterly, Volume 4,"
" Issue 4 (December 1991), Amsterdam, pp 283--303."
msgstr ""
"귀도 반 로섬과 젤케 드 보어, \"Interactively Testing Remote Servers "
"Using the Python Programming Language\", CWI Quearterly, 4권, 4호 "
"(1991년 12월), 암스테르담, 283--303 페이지."

#: ../Doc/faq/general.rst:259
msgid "Are there any books on Python?"
msgstr "파이썬 관련 책이 있습니까?"

#: ../Doc/faq/general.rst:261
msgid ""
"Yes, there are many, and more are being published.  See the python.org "
"wiki at https://wiki.python.org/moin/PythonBooks for a list."
msgstr "예, 많이 있고 현재 출판되는 책들도 있습니다. 리스트를 원한다면 "
"https://wiki.python.org/moin/PythonBooks에서 파이썬 위키를 확인해주십시오."

#: ../Doc/faq/general.rst:264
msgid ""
"You can also search online bookstores for \"Python\" and filter out the "
"Monty Python references; or perhaps search for \"Python\" and "
"\"language\"."
msgstr ""
"아니면 온라인 서점에서 \"파이썬\"을 검색하고 몬티 파이썬 관련 항목을 "
"필터링 해도 괜찮습니다; 검색할 때 \"파이썬\"과 \"언어\"를 검색해도 "
"좋습니다."

#: ../Doc/faq/general.rst:269
msgid "Where in the world is www.python.org located?"
msgstr "도대체 www.python.org는 어디에 있는겁니까?"

#: ../Doc/faq/general.rst:271
msgid ""
"The Python project's infrastructure is located all over the world and is "
"managed by the Python Infrastructure Team. Details `here "
"<http://infra.psf.io>`__."
msgstr ""
"파이썬 프로젝트의 기반 시설은 전 세계 각지에 존재하며 Python Infrastructure "
"Team에 의해 관리되고 있습니다. 추가 정보는 `여기 <http://infra.psf.io>`__"
"있습니다."

#: ../Doc/faq/general.rst:276
msgid "Why is it called Python?"
msgstr "왜 이 언어는 파이썬이라 불립니까?"

#: ../Doc/faq/general.rst:278
msgid ""
"When he began implementing Python, Guido van Rossum was also reading the "
"published scripts from `\"Monty Python's Flying Circus\" "
"<https://en.wikipedia.org/wiki/Monty_Python>`__, a BBC comedy series from"
" the 1970s.  Van Rossum thought he needed a name that was short, unique, "
"and slightly mysterious, so he decided to call the language Python."
msgstr ""
"귀도 반 로섬씨가 파이썬을 구현할 당시 그는 1970년대에 BBC에서 방영된 "
"코미디 시리즈인 `\"몬티 파이튼의 플라잉 서커스\" <https://ko.wikipedia."
"org/wiki/몬티_파이튼`__ 대본을 읽고 있었습니다. 반 로섬은 자신이 만든 "
"언어가 짧고 독창적이면서도 약간 신비한 느낌의 이름이 필요하다고 생각했기에 "
"언어를 파이썬이라고 부르기로 결정했습니다."
 

#: ../Doc/faq/general.rst:286
msgid "Do I have to like \"Monty Python's Flying Circus\"?"
msgstr "\"몬티 파이튼의 플라잉 서커스\"를 좋아해야합니까?"

#: ../Doc/faq/general.rst:288
msgid "No, but it helps.  :)"
msgstr "아니오, 하지만 도움은 됩니다. :)"

#: ../Doc/faq/general.rst:292
msgid "Python in the real world"
msgstr "현실 속의 파이썬"

#: ../Doc/faq/general.rst:295
msgid "How stable is Python?"
msgstr "파이썬은 어느정도 안정화 되어있습니까?"

#: ../Doc/faq/general.rst:297
msgid ""
"Very stable.  New, stable releases have been coming out roughly every 6 "
"to 18 months since 1991, and this seems likely to continue.  Currently "
"there are usually around 18 months between major releases."
msgstr ""
"굉장히 안정적입니다. 새롭고 안정적인 배포판을 1991년부터 대략 6 개월에서 "
"18 개월 사이에 계속해서 출시하고 있고, 이는 앞으로도 계속될 것 같습니다. "
"현재 대규모 배포판들은 보통 18 개월의 간격을 두고 출시됩니다."

#: ../Doc/faq/general.rst:301
msgid ""
"The developers issue \"bugfix\" releases of older versions, so the "
"stability of existing releases gradually improves.  Bugfix releases, "
"indicated by a third component of the version number (e.g. 3.5.3, 3.6.2),"
" are managed for stability; only fixes for known problems are included in"
" a bugfix release, and it's guaranteed that interfaces will remain the "
"same throughout a series of bugfix releases."
msgstr ""
"개발자 분들이 옛 버전의 \"버그 수정\" 배포판들을 공개하기 때문에 기존에 "
"배포된 버전의 안정성은 서서히 증가합니다. 버그 수정 배포판은 버전의 세 번쨰"
"숫자로 표시하며 (예: 3.5.3, 3.6.2), 안정성을 위해 관리됩니다. 버그 수정 "
"배포판은 현재까지 알려진 버그만을 수정하며, 인터페이스는 절대 변하지 않습니다."

#: ../Doc/faq/general.rst:308
msgid ""
"The latest stable releases can always be found on the `Python download "
"page <https://www.python.org/downloads/>`_.  There are two production-"
"ready versions of Python: 2.x and 3.x. The recommended version is 3.x, "
"which is supported by most widely used libraries.  Although 2.x is still "
"widely used, `it will not be maintained after January 1, 2020 "
"<https://www.python.org/dev/peps/pep-0373/>`_."
msgstr ""

#: ../Doc/faq/general.rst:315
msgid "How many people are using Python?"
msgstr "얼마나 많은 사람들이 파이썬을 씁니까?"

#: ../Doc/faq/general.rst:317
msgid ""
"There are probably tens of thousands of users, though it's difficult to "
"obtain an exact count."
msgstr ""
"아마 수 많은 사용자들이 있을텐데, 정확한 수를 얻기는 힘듭니다."

#: ../Doc/faq/general.rst:320
msgid ""
"Python is available for free download, so there are no sales figures, and"
" it's available from many different sites and packaged with many Linux "
"distributions, so download statistics don't tell the whole story either."
msgstr ""
"파이썬은 무료로 다운로드 받을 수 있기 때문에 판매액이 없습니다. 그리고 "
"파이썬은 다양한 사이트에서, 다양한 리눅스 배포판과 패키지로 제공되므로 "
"다운로드 통계치 역시 모든 것을 알려주지 못합니다."

#: ../Doc/faq/general.rst:324
msgid ""
"The comp.lang.python newsgroup is very active, but not all Python users "
"post to the group or even read it."
msgstr ""
"활발하게 활동하는 comp.lang.python이라는 뉴스그룹이 있지만 모든 파이썬 "
"유저들이 그곳에 글을 올리지 않으며 심지어 읽는 것도 아닙니다."

#: ../Doc/faq/general.rst:329
msgid "Have any significant projects been done in Python?"
msgstr ""
"파이썬으로 진행된 중요한 프로잭트가 존재합니까?"

#: ../Doc/faq/general.rst:331
msgid ""
"See https://www.python.org/about/success for a list of projects that use "
"Python. Consulting the proceedings for `past Python conferences "
"<https://www.python.org/community/workshops/>`_ will reveal contributions"
" from many different companies and organizations."
msgstr ""
"https://www.python.org/about/success에서 파이썬을 사용한 프로젝트를 확인할 "
"수 있습니다.*****************************************************"

#: ../Doc/faq/general.rst:336
msgid ""
"High-profile Python projects include `the Mailman mailing list manager "
"<http://www.list.org>`_ and `the Zope application server "
"<http://www.zope.org>`_.  Several Linux distributions, most notably `Red "
"Hat <https://www.redhat.com>`_, have written part or all of their "
"installer and system administration software in Python.  Companies that "
"use Python internally include Google, Yahoo, and Lucasfilm Ltd."
msgstr ""

#: ../Doc/faq/general.rst:345
msgid "What new developments are expected for Python in the future?"
msgstr "파이썬에 어떤 새로운 개발요소들이 예정되어 있습니까?"

#: ../Doc/faq/general.rst:347
msgid ""
"See https://www.python.org/dev/peps/ for the Python Enhancement Proposals"
" (PEPs). PEPs are design documents describing a suggested new feature for"
" Python, providing a concise technical specification and a rationale.  "
"Look for a PEP titled \"Python X.Y Release Schedule\", where X.Y is a "
"version that hasn't been publicly released yet."
msgstr ""

#: ../Doc/faq/general.rst:353
msgid ""
"New development is discussed on `the python-dev mailing list "
"<https://mail.python.org/mailman/listinfo/python-dev/>`_."
msgstr ""

#: ../Doc/faq/general.rst:358
msgid "Is it reasonable to propose incompatible changes to Python?"
msgstr "기존의 파이썬과 호환 가능하지 않는 변경안을 제시해도 괜찮습니까?"

#: ../Doc/faq/general.rst:360
msgid ""
"In general, no.  There are already millions of lines of Python code "
"around the world, so any change in the language that invalidates more "
"than a very small fraction of existing programs has to be frowned upon.  "
"Even if you can provide a conversion program, there's still the problem "
"of updating all documentation; many books have been written about Python,"
" and we don't want to invalidate them all at a single stroke."
msgstr ""
"일반적으로, 아니오. 현재 전 세계에 수 없이 많은 파이썬 코드들이 작성되어 "
"있으며, 이미 존재하는 프로그램의 아주 작은 부분이라도 무효화한다면 "
"그 변경안은 눈살을 찌푸리고 봐야합니다. 당신이 변환 프로그램을 "
"제공한다고 해도 설명서를 전부 업데이트 해야하는 문제가 남아있습니다."
"뿐만 아니라 수 많은 책들이 파이썬에 관련해서 쓰여져 있는데, 저희는 "
"한 순간에 그 모든 책들을 무효화 시키고 싶지 않습니다."

#: ../Doc/faq/general.rst:367
msgid ""
"Providing a gradual upgrade path is necessary if a feature has to be "
"changed. :pep:`5` describes the procedure followed for introducing "
"backward-incompatible changes while minimizing disruption for users."
msgstr ""
"만약 기능이 바껴야 한다면 점차적인 업그레이드 방안의 제시를 필요로 "
"합니다. :pep:`5` 에서 하위호환 불가능한 변경을 도입할 때 사용자의 "
"불편함을 최소화 하는 절차를 확인할 수 있습니다."

#: ../Doc/faq/general.rst:373
msgid "Is Python a good language for beginning programmers?"
msgstr "파이썬이 초보 프로그래머들에게 좋은 언어입니까?"

#: ../Doc/faq/general.rst:375
msgid "Yes."
msgstr "예."

#: ../Doc/faq/general.rst:377
msgid ""
"It is still common to start students with a procedural and statically "
"typed language such as Pascal, C, or a subset of C++ or Java.  Students "
"may be better served by learning Python as their first language.  Python "
"has a very simple and consistent syntax and a large standard library and,"
" most importantly, using Python in a beginning programming course lets "
"students concentrate on important programming skills such as problem "
"decomposition and data type design.  With Python, students can be quickly"
" introduced to basic concepts such as loops and procedures.  They can "
"probably even work with user-defined objects in their very first course."
msgstr ""
"파스칼, C, 또는 C++이나 Java의 일부처럼 절차적이고 정적인 언어를 "
"학생들의 첫 언어로 가르치는 것은 아직 흔한 교육 방식입니다. 하지만 "
"그들이 파이썬을 첫 언어로 배우는 것이 더 이로울 수도 있습니다. 파이썬은 "
"굉장히 간단하면서도 일관된 문법과 방대한 표준 라이브러리를 가지고 "
"있으며, 무엇보다 초기 프로그래밍 교육에서 파이썬을 이용하면 학생들이 "
"자료형 디자인, 그리고 문제 분석과 같은 중요한 프로그래밍 능력에 집중할 수 "
"있도록 해줍니다. 학생들은 파이썬을 통해 반복문과 절차같은 기초적인 "
"콘셉트를 빠르게 접할 수 있습니다. 더 나아가 그들은 첫 강의에서 "
"사용자 정의 객체를 활용하여 작업을 할 수도 있을 것입니다."

#: ../Doc/faq/general.rst:387
msgid ""
"For a student who has never programmed before, using a statically typed "
"language seems unnatural.  It presents additional complexity that the "
"student must master and slows the pace of the course.  The students are "
"trying to learn to think like a computer, decompose problems, design "
"consistent interfaces, and encapsulate data.  While learning to use a "
"statically typed language is important in the long term, it is not "
"necessarily the best topic to address in the students' first programming "
"course."
msgstr ""
"프로그래밍을 한 번도 해본적이 없는 학생이라면 정적인 프로그래밍 언어를 "
"사용하는 것은 자연스럽게 느껴지지 않을 것입니다. 이 과정을 해결하기 "
"위해서는 부가적인 요소를 익혀야하며, 이는 강의 속도를 낮춥니다. 학생들은 "
""

#: ../Doc/faq/general.rst:395
msgid ""
"Many other aspects of Python make it a good first language.  Like Java, "
"Python has a large standard library so that students can be assigned "
"programming projects very early in the course that *do* something.  "
"Assignments aren't restricted to the standard four-function calculator "
"and check balancing programs.  By using the standard library, students "
"can gain the satisfaction of working on realistic applications as they "
"learn the fundamentals of programming. Using the standard library also "
"teaches students about code reuse.  Third-party modules such as PyGame "
"are also helpful in extending the students' reach."
msgstr ""

#: ../Doc/faq/general.rst:404
msgid ""
"Python's interactive interpreter enables students to test language "
"features while they're programming.  They can keep a window with the "
"interpreter running while they enter their program's source in another "
"window.  If they can't remember the methods for a list, they can do "
"something like this::"
msgstr ""

#: ../Doc/faq/general.rst:433
msgid ""
"With the interpreter, documentation is never far from the student as they"
" are programming."
msgstr ""

#: ../Doc/faq/general.rst:436
msgid ""
"There are also good IDEs for Python.  IDLE is a cross-platform IDE for "
"Python that is written in Python using Tkinter.  PythonWin is a Windows-"
"specific IDE. Emacs users will be happy to know that there is a very good"
" Python mode for Emacs.  All of these programming environments provide "
"syntax highlighting, auto-indenting, and access to the interactive "
"interpreter while coding.  Consult `the Python wiki "
"<https://wiki.python.org/moin/PythonEditors>`_ for a full list of Python "
"editing environments."
msgstr ""

#: ../Doc/faq/general.rst:444
msgid ""
"If you want to discuss Python's use in education, you may be interested "
"in joining `the edu-sig mailing list "
"<https://www.python.org/community/sigs/current/edu-sig>`_."
msgstr ""
"만약 파이썬이 교육분야에서 어떻게 사용되는지에 대해 논의하고 싶으시면 "
"`the edu-sig mailing list <https://www.python.org/community/sigs/curr"
"ent/edu-sig>`__에 들어와 주십시오."

#~ msgid ""
#~ "The language comes with a large "
#~ "standard library that covers areas such"
#~ " as string processing (regular expressions,"
#~ " Unicode, calculating differences between "
#~ "files), Internet protocols (HTTP, FTP, "
#~ "SMTP, XML-RPC, POP, IMAP, CGI "
#~ "programming), software engineering (unit "
#~ "testing, logging, profiling, parsing Python"
#~ " code), and operating system interfaces "
#~ "(system calls, filesystems, TCP/IP sockets)."
#~ "  Look at the table of contents "
#~ "for :ref:`library-index` to get an "
#~ "idea of what's available.  A wide "
#~ "variety of third-party extensions are"
#~ " also available.  Consult `the Python "
#~ "Package Index <https://pypi.python.org/pypi>`_ to"
#~ " find packages of interest to you."
#~ msgstr ""

#~ msgid ""
#~ "The Python project's infrastructure is "
#~ "located all over the world. "
#~ "`www.python.org <https://www.python.org>`_ is "
#~ "graciously hosted by `Rackspace "
#~ "<https://www.rackspace.com>`_, with CDN caching "
#~ "provided by `Fastly <https://www.fastly.com>`_.  "
#~ "`Upfront Systems <http://www.upfrontsystems.co.za/>`_ "
#~ "hosts `bugs.python.org <https://bugs.python.org>`_.  "
#~ "Many other Python services like `the "
#~ "Wiki <https://wiki.python.org>`_ are hosted by"
#~ " `Oregon State University Open Source "
#~ "Lab <https://osuosl.org>`_."
#~ msgstr ""

#~ msgid ""
#~ "The developers issue \"bugfix\" releases "
#~ "of older versions, so the stability "
#~ "of existing releases gradually improves.  "
#~ "Bugfix releases, indicated by a third"
#~ " component of the version number "
#~ "(e.g. 2.5.3, 2.6.2), are managed for "
#~ "stability; only fixes for known problems"
#~ " are included in a bugfix release,"
#~ " and it's guaranteed that interfaces "
#~ "will remain the same throughout a "
#~ "series of bugfix releases."
#~ msgstr ""

#~ msgid ""
#~ "The latest stable releases can always"
#~ " be found on the `Python download "
#~ "page <https://www.python.org/downloads/>`_.  There "
#~ "are two recommended production-ready "
#~ "versions at this point in time, "
#~ "because at the moment there are "
#~ "two branches of stable releases: 2.x "
#~ "and 3.x.  Python 3.x may be less"
#~ " useful than 2.x, since currently "
#~ "there is more third party software "
#~ "available for Python 2 than for "
#~ "Python 3.  Python 2 code will "
#~ "generally not run unchanged in Python"
#~ " 3."
#~ msgstr ""

#~ msgid ""
#~ "The Python project's infrastructure is "
#~ "located all over the world. "
#~ "`www.python.org <https://www.python.org>`_ is "
#~ "graciously hosted by `Rackspace "
#~ "<https://www.rackspace.com>`_, with CDN caching "
#~ "provided by `Fastly <https://www.fastly.com>`_.  "
#~ "`Upfront Systems <http://www.upfrontsoftware.co.za>`_ "
#~ "hosts `bugs.python.org <https://bugs.python.org>`_.  "
#~ "Many other Python services like `the "
#~ "Wiki <https://wiki.python.org>`_ are hosted by"
#~ " `Oregon State University Open Source "
#~ "Lab <https://osuosl.org>`_."
#~ msgstr ""

#~ msgid ""
#~ "The latest stable releases can always"
#~ " be found on the `Python download "
#~ "page <https://www.python.org/downloads/>`_.  There "
#~ "are two production-ready version of "
#~ "Python: 2.x and 3.x, but the "
#~ "recommended one at this times is "
#~ "Python 3.x. Although Python 2.x is "
#~ "still widely used, `it will not be"
#~ " maintained after January 1, 2020 "
#~ "<https://www.python.org/dev/peps/pep-0373/>`_. Python 2.x"
#~ " was known for having more third-"
#~ "party libraries available, however, by "
#~ "the time of this writing, most of"
#~ " the widely used libraries support "
#~ "Python 3.x, and some are even "
#~ "dropping the Python 2.x support."
#~ msgstr ""

